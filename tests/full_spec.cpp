#include <cmm/cmm.hpp>
#include <string>

#include "catch2/catch.hpp"

//NOLINTNEXTLINE
TEST_CASE("Common Mark Full Spec", "[full] [Not_Working]") {
    CHECK(cmm::parce(std::string("\tfoo\tbaz\t\tbim\n")) == std::string("<pre><code>foo\tbaz\t\tbim\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("  \tfoo\tbaz\t\tbim\n")) == std::string("<pre><code>foo\tbaz\t\tbim\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("    a\ta\n    ὐ\ta\n")) == std::string("<pre><code>a\ta\nὐ\ta\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("  - foo\n\n\tbar\n")) == std::string("<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("- foo\n\n\t\tbar\n")) == std::string("<ul>\n<li>\n<p>foo</p>\n<pre><code>  bar\n</code></pre>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string(">\t\tfoo\n")) == std::string("<blockquote>\n<pre><code>  foo\n</code></pre>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("-\t\tfoo\n")) == std::string("<ul>\n<li>\n<pre><code>  foo\n</code></pre>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("    foo\n\tbar\n")) == std::string("<pre><code>foo\nbar\n</code></pre>\n"));
    CHECK(cmm::parce(std::string(" - foo\n   - bar\n\t - baz\n")) == std::string("<ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>baz</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("#\tFoo\n")) == std::string("<h1>Foo</h1>\n"));
    CHECK(cmm::parce(std::string("*\t*\t*\t\n")) == std::string("<hr />\n"));
    CHECK(cmm::parce(std::string("- `one\n- two`\n")) == std::string("<ul>\n<li>`one</li>\n<li>two`</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("***\n---\n___\n")) == std::string("<hr />\n<hr />\n<hr />\n"));
    CHECK(cmm::parce(std::string("+++\n")) == std::string("<p>+++</p>\n"));
    CHECK(cmm::parce(std::string("===\n")) == std::string("<p>===</p>\n"));
    CHECK(cmm::parce(std::string("--\n**\n__\n")) == std::string("<p>--\n**\n__</p>\n"));
    CHECK(cmm::parce(std::string(" ***\n  ***\n   ***\n")) == std::string("<hr />\n<hr />\n<hr />\n"));
    CHECK(cmm::parce(std::string("    ***\n")) == std::string("<pre><code>***\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("Foo\n    ***\n")) == std::string("<p>Foo\n***</p>\n"));
    CHECK(cmm::parce(std::string("_____________________________________\n")) == std::string("<hr />\n"));
    CHECK(cmm::parce(std::string(" - - -\n")) == std::string("<hr />\n"));
    CHECK(cmm::parce(std::string(" **  * ** * ** * **\n")) == std::string("<hr />\n"));
    CHECK(cmm::parce(std::string("-     -      -      -\n")) == std::string("<hr />\n"));
    CHECK(cmm::parce(std::string("- - - -    \n")) == std::string("<hr />\n"));
    CHECK(cmm::parce(std::string("_ _ _ _ a\n\na------\n\n---a---\n")) == std::string("<p>_ _ _ _ a</p>\n<p>a------</p>\n<p>---a---</p>\n"));
    CHECK(cmm::parce(std::string(" *-*\n")) == std::string("<p><em>-</em></p>\n"));
    CHECK(cmm::parce(std::string("- foo\n***\n- bar\n")) == std::string("<ul>\n<li>foo</li>\n</ul>\n<hr />\n<ul>\n<li>bar</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("Foo\n***\nbar\n")) == std::string("<p>Foo</p>\n<hr />\n<p>bar</p>\n"));
    CHECK(cmm::parce(std::string("Foo\n---\nbar\n")) == std::string("<h2>Foo</h2>\n<p>bar</p>\n"));
    CHECK(cmm::parce(std::string("* Foo\n* * *\n* Bar\n")) == std::string("<ul>\n<li>Foo</li>\n</ul>\n<hr />\n<ul>\n<li>Bar</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("- Foo\n- * * *\n")) == std::string("<ul>\n<li>Foo</li>\n<li>\n<hr />\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("# foo\n## foo\n### foo\n#### foo\n##### foo\n###### foo\n")) == std::string("<h1>foo</h1>\n<h2>foo</h2>\n<h3>foo</h3>\n<h4>foo</h4>\n<h5>foo</h5>\n<h6>foo</h6>\n"));
    CHECK(cmm::parce(std::string("####### foo\n")) == std::string("<p>####### foo</p>\n"));
    CHECK(cmm::parce(std::string("#5 bolt\n\n#hashtag\n")) == std::string("<p>#5 bolt</p>\n<p>#hashtag</p>\n"));
    CHECK(cmm::parce(std::string("\\## foo\n")) == std::string("<p>## foo</p>\n"));
    CHECK(cmm::parce(std::string("# foo *bar* \\*baz\\*\n")) == std::string("<h1>foo <em>bar</em> *baz*</h1>\n"));
    CHECK(cmm::parce(std::string("#                  foo                     \n")) == std::string("<h1>foo</h1>\n"));
    CHECK(cmm::parce(std::string(" ### foo\n  ## foo\n   # foo\n")) == std::string("<h3>foo</h3>\n<h2>foo</h2>\n<h1>foo</h1>\n"));
    CHECK(cmm::parce(std::string("    # foo\n")) == std::string("<pre><code># foo\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("foo\n    # bar\n")) == std::string("<p>foo\n# bar</p>\n"));
    CHECK(cmm::parce(std::string("## foo ##\n  ###   bar    ###\n")) == std::string("<h2>foo</h2>\n<h3>bar</h3>\n"));
    CHECK(cmm::parce(std::string("# foo ##################################\n##### foo ##\n")) == std::string("<h1>foo</h1>\n<h5>foo</h5>\n"));
    CHECK(cmm::parce(std::string("### foo ###     \n")) == std::string("<h3>foo</h3>\n"));
    CHECK(cmm::parce(std::string("### foo ### b\n")) == std::string("<h3>foo ### b</h3>\n"));
    CHECK(cmm::parce(std::string("# foo#\n")) == std::string("<h1>foo#</h1>\n"));
    CHECK(cmm::parce(std::string("### foo \\###\n## foo #\\##\n# foo \\#\n")) == std::string("<h3>foo ###</h3>\n<h2>foo ###</h2>\n<h1>foo #</h1>\n"));
    CHECK(cmm::parce(std::string("****\n## foo\n****\n")) == std::string("<hr />\n<h2>foo</h2>\n<hr />\n"));
    CHECK(cmm::parce(std::string("Foo bar\n# baz\nBar foo\n")) == std::string("<p>Foo bar</p>\n<h1>baz</h1>\n<p>Bar foo</p>\n"));
    CHECK(cmm::parce(std::string("## \n#\n### ###\n")) == std::string("<h2></h2>\n<h1></h1>\n<h3></h3>\n"));
    CHECK(cmm::parce(std::string("Foo *bar*\n=========\n\nFoo *bar*\n---------\n")) == std::string("<h1>Foo <em>bar</em></h1>\n<h2>Foo <em>bar</em></h2>\n"));
    CHECK(cmm::parce(std::string("Foo *bar\nbaz*\n====\n")) == std::string("<h1>Foo <em>bar\nbaz</em></h1>\n"));
    CHECK(cmm::parce(std::string("  Foo *bar\nbaz*\t\n====\n")) == std::string("<h1>Foo <em>bar\nbaz</em></h1>\n"));
    CHECK(cmm::parce(std::string("Foo\n-------------------------\n\nFoo\n=\n")) == std::string("<h2>Foo</h2>\n<h1>Foo</h1>\n"));
    CHECK(cmm::parce(std::string("   Foo\n---\n\n  Foo\n-----\n\n  Foo\n  ===\n")) == std::string("<h2>Foo</h2>\n<h2>Foo</h2>\n<h1>Foo</h1>\n"));
    CHECK(cmm::parce(std::string("    Foo\n    ---\n\n    Foo\n---\n")) == std::string("<pre><code>Foo\n---\n\nFoo\n</code></pre>\n<hr />\n"));
    CHECK(cmm::parce(std::string("Foo\n   ----      \n")) == std::string("<h2>Foo</h2>\n"));
    CHECK(cmm::parce(std::string("Foo\n    ---\n")) == std::string("<p>Foo\n---</p>\n"));
    CHECK(cmm::parce(std::string("Foo\n= =\n\nFoo\n--- -\n")) == std::string("<p>Foo\n= =</p>\n<p>Foo</p>\n<hr />\n"));
    CHECK(cmm::parce(std::string("Foo  \n-----\n")) == std::string("<h2>Foo</h2>\n"));
    CHECK(cmm::parce(std::string("Foo\\\n----\n")) == std::string("<h2>Foo\\</h2>\n"));
    CHECK(cmm::parce(std::string("`Foo\n----\n`\n\n<a title=\"a lot\n---\nof dashes\"/>\n")) == std::string("<h2>`Foo</h2>\n<p>`</p>\n<h2>&lt;a title=&quot;a lot</h2>\n<p>of dashes&quot;/&gt;</p>\n"));
    CHECK(cmm::parce(std::string("> Foo\n---\n")) == std::string("<blockquote>\n<p>Foo</p>\n</blockquote>\n<hr />\n"));
    CHECK(cmm::parce(std::string("> foo\nbar\n===\n")) == std::string("<blockquote>\n<p>foo\nbar\n===</p>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("- Foo\n---\n")) == std::string("<ul>\n<li>Foo</li>\n</ul>\n<hr />\n"));
    CHECK(cmm::parce(std::string("Foo\nBar\n---\n")) == std::string("<h2>Foo\nBar</h2>\n"));
    CHECK(cmm::parce(std::string("---\nFoo\n---\nBar\n---\nBaz\n")) == std::string("<hr />\n<h2>Foo</h2>\n<h2>Bar</h2>\n<p>Baz</p>\n"));
    CHECK(cmm::parce(std::string("\n====\n")) == std::string("<p>====</p>\n"));
    CHECK(cmm::parce(std::string("---\n---\n")) == std::string("<hr />\n<hr />\n"));
    CHECK(cmm::parce(std::string("- foo\n-----\n")) == std::string("<ul>\n<li>foo</li>\n</ul>\n<hr />\n"));
    CHECK(cmm::parce(std::string("    foo\n---\n")) == std::string("<pre><code>foo\n</code></pre>\n<hr />\n"));
    CHECK(cmm::parce(std::string("> foo\n-----\n")) == std::string("<blockquote>\n<p>foo</p>\n</blockquote>\n<hr />\n"));
    CHECK(cmm::parce(std::string("\\> foo\n------\n")) == std::string("<h2>&gt; foo</h2>\n"));
    CHECK(cmm::parce(std::string("Foo\n\nbar\n---\nbaz\n")) == std::string("<p>Foo</p>\n<h2>bar</h2>\n<p>baz</p>\n"));
    CHECK(cmm::parce(std::string("Foo\nbar\n\n---\n\nbaz\n")) == std::string("<p>Foo\nbar</p>\n<hr />\n<p>baz</p>\n"));
    CHECK(cmm::parce(std::string("Foo\nbar\n* * *\nbaz\n")) == std::string("<p>Foo\nbar</p>\n<hr />\n<p>baz</p>\n"));
    CHECK(cmm::parce(std::string("Foo\nbar\n\\---\nbaz\n")) == std::string("<p>Foo\nbar\n---\nbaz</p>\n"));
    CHECK(cmm::parce(std::string("    a simple\n      indented code block\n")) == std::string("<pre><code>a simple\n  indented code block\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("  - foo\n\n    bar\n")) == std::string("<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("1.  foo\n\n    - bar\n")) == std::string("<ol>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("    <a/>\n    *hi*\n\n    - one\n")) == std::string("<pre><code>&lt;a/&gt;\n*hi*\n\n- one\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("    chunk1\n\n    chunk2\n  \n \n \n    chunk3\n")) == std::string("<pre><code>chunk1\n\nchunk2\n\n\n\nchunk3\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("    chunk1\n      \n      chunk2\n")) == std::string("<pre><code>chunk1\n  \n  chunk2\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("Foo\n    bar\n\n")) == std::string("<p>Foo\nbar</p>\n"));
    CHECK(cmm::parce(std::string("    foo\nbar\n")) == std::string("<pre><code>foo\n</code></pre>\n<p>bar</p>\n"));
    CHECK(cmm::parce(std::string("# Heading\n    foo\nHeading\n------\n    foo\n----\n")) == std::string("<h1>Heading</h1>\n<pre><code>foo\n</code></pre>\n<h2>Heading</h2>\n<pre><code>foo\n</code></pre>\n<hr />\n"));
    CHECK(cmm::parce(std::string("        foo\n    bar\n")) == std::string("<pre><code>    foo\nbar\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("\n    \n    foo\n    \n\n")) == std::string("<pre><code>foo\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("    foo  \n")) == std::string("<pre><code>foo  \n</code></pre>\n"));
    CHECK(cmm::parce(std::string("```\n<\n >\n```\n")) == std::string("<pre><code>&lt;\n &gt;\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("~~~\n<\n >\n~~~\n")) == std::string("<pre><code>&lt;\n &gt;\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("``\nfoo\n``\n")) == std::string("<p><code>foo</code></p>\n"));
    CHECK(cmm::parce(std::string("```\naaa\n~~~\n```\n")) == std::string("<pre><code>aaa\n~~~\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("~~~\naaa\n```\n~~~\n")) == std::string("<pre><code>aaa\n```\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("````\naaa\n```\n``````\n")) == std::string("<pre><code>aaa\n```\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("~~~~\naaa\n~~~\n~~~~\n")) == std::string("<pre><code>aaa\n~~~\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("```\n")) == std::string("<pre><code></code></pre>\n"));
    CHECK(cmm::parce(std::string("`````\n\n```\naaa\n")) == std::string("<pre><code>\n```\naaa\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("> ```\n> aaa\n\nbbb\n")) == std::string("<blockquote>\n<pre><code>aaa\n</code></pre>\n</blockquote>\n<p>bbb</p>\n"));
    CHECK(cmm::parce(std::string("```\n\n  \n```\n")) == std::string("<pre><code>\n  \n</code></pre>\n"));
    CHECK(cmm::parce(std::string("```\n```\n")) == std::string("<pre><code></code></pre>\n"));
    CHECK(cmm::parce(std::string(" ```\n aaa\naaa\n```\n")) == std::string("<pre><code>aaa\naaa\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("  ```\naaa\n  aaa\naaa\n  ```\n")) == std::string("<pre><code>aaa\naaa\naaa\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("   ```\n   aaa\n    aaa\n  aaa\n   ```\n")) == std::string("<pre><code>aaa\n aaa\naaa\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("    ```\n    aaa\n    ```\n")) == std::string("<pre><code>```\naaa\n```\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("```\naaa\n  ```\n")) == std::string("<pre><code>aaa\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("   ```\naaa\n  ```\n")) == std::string("<pre><code>aaa\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("```\naaa\n    ```\n")) == std::string("<pre><code>aaa\n    ```\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("``` ```\naaa\n")) == std::string("<p><code> </code>\naaa</p>\n"));
    CHECK(cmm::parce(std::string("~~~~~~\naaa\n~~~ ~~\n")) == std::string("<pre><code>aaa\n~~~ ~~\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("foo\n```\nbar\n```\nbaz\n")) == std::string("<p>foo</p>\n<pre><code>bar\n</code></pre>\n<p>baz</p>\n"));
    CHECK(cmm::parce(std::string("foo\n---\n~~~\nbar\n~~~\n# baz\n")) == std::string("<h2>foo</h2>\n<pre><code>bar\n</code></pre>\n<h1>baz</h1>\n"));
    CHECK(cmm::parce(std::string("```ruby\ndef foo(x)\n  return 3\nend\n```\n")) == std::string("<pre><code class=\"language-ruby\">def foo(x)\n  return 3\nend\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("~~~~    ruby startline=3 $%@#$\ndef foo(x)\n  return 3\nend\n~~~~~~~\n")) == std::string("<pre><code class=\"language-ruby\">def foo(x)\n  return 3\nend\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("````;\n````\n")) == std::string("<pre><code class=\"language-;\"></code></pre>\n"));
    CHECK(cmm::parce(std::string("``` aa ```\nfoo\n")) == std::string("<p><code>aa</code>\nfoo</p>\n"));
    CHECK(cmm::parce(std::string("~~~ aa ``` ~~~\nfoo\n~~~\n")) == std::string("<pre><code class=\"language-aa\">foo\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("```\n``` aaa\n```\n")) == std::string("<pre><code>``` aaa\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("<table><tr><td>\n<pre>\n**Hello**,\n\n_world_.\n</pre>\n</td></tr></table>\n")) == std::string("<table><tr><td>\n<pre>\n**Hello**,\n<p><em>world</em>.\n</pre></p>\n</td></tr></table>\n"));
    CHECK(cmm::parce(std::string("<table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n\nokay.\n")) == std::string("<table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n<p>okay.</p>\n"));
    CHECK(cmm::parce(std::string(" <div>\n  *hello*\n         <foo><a>\n")) == std::string(" <div>\n  *hello*\n         <foo><a>\n"));
    CHECK(cmm::parce(std::string("</div>\n*foo*\n")) == std::string("</div>\n*foo*\n"));
    CHECK(cmm::parce(std::string("<DIV CLASS=\"foo\">\n\n*Markdown*\n\n</DIV>\n")) == std::string("<DIV CLASS=\"foo\">\n<p><em>Markdown</em></p>\n</DIV>\n"));
    CHECK(cmm::parce(std::string("<div id=\"foo\"\n  class=\"bar\">\n</div>\n")) == std::string("<div id=\"foo\"\n  class=\"bar\">\n</div>\n"));
    CHECK(cmm::parce(std::string("<div id=\"foo\" class=\"bar\n  baz\">\n</div>\n")) == std::string("<div id=\"foo\" class=\"bar\n  baz\">\n</div>\n"));
    CHECK(cmm::parce(std::string("<div>\n*foo*\n\n*bar*\n")) == std::string("<div>\n*foo*\n<p><em>bar</em></p>\n"));
    CHECK(cmm::parce(std::string("<div id=\"foo\"\n*hi*\n")) == std::string("<div id=\"foo\"\n*hi*\n"));
    CHECK(cmm::parce(std::string("<div class\nfoo\n")) == std::string("<div class\nfoo\n"));
    CHECK(cmm::parce(std::string("<div *???-&&&-<---\n*foo*\n")) == std::string("<div *???-&&&-<---\n*foo*\n"));
    CHECK(cmm::parce(std::string("<div><a href=\"bar\">*foo*</a></div>\n")) == std::string("<div><a href=\"bar\">*foo*</a></div>\n"));
    CHECK(cmm::parce(std::string("<table><tr><td>\nfoo\n</td></tr></table>\n")) == std::string("<table><tr><td>\nfoo\n</td></tr></table>\n"));
    CHECK(cmm::parce(std::string("<div></div>\n``` c\nint x = 33;\n```\n")) == std::string("<div></div>\n``` c\nint x = 33;\n```\n"));
    CHECK(cmm::parce(std::string("<a href=\"foo\">\n*bar*\n</a>\n")) == std::string("<a href=\"foo\">\n*bar*\n</a>\n"));
    CHECK(cmm::parce(std::string("<Warning>\n*bar*\n</Warning>\n")) == std::string("<Warning>\n*bar*\n</Warning>\n"));
    CHECK(cmm::parce(std::string("<i class=\"foo\">\n*bar*\n</i>\n")) == std::string("<i class=\"foo\">\n*bar*\n</i>\n"));
    CHECK(cmm::parce(std::string("</ins>\n*bar*\n")) == std::string("</ins>\n*bar*\n"));
    CHECK(cmm::parce(std::string("<del>\n*foo*\n</del>\n")) == std::string("<del>\n*foo*\n</del>\n"));
    CHECK(cmm::parce(std::string("<del>\n\n*foo*\n\n</del>\n")) == std::string("<del>\n<p><em>foo</em></p>\n</del>\n"));
    CHECK(cmm::parce(std::string("<del>*foo*</del>\n")) == std::string("<p><del><em>foo</em></del></p>\n"));
    CHECK(cmm::parce(std::string("<pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\nokay\n")) == std::string("<pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\n<p>okay</p>\n"));
    CHECK(cmm::parce(std::string("<script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\nokay\n")) == std::string("<script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\n<p>okay</p>\n"));
    CHECK(cmm::parce(std::string("<style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\nokay\n")) == std::string("<style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\n<p>okay</p>\n"));
    CHECK(cmm::parce(std::string("<style\n  type=\"text/css\">\n\nfoo\n")) == std::string("<style\n  type=\"text/css\">\n\nfoo\n"));
    CHECK(cmm::parce(std::string("> <div>\n> foo\n\nbar\n")) == std::string("<blockquote>\n<div>\nfoo\n</blockquote>\n<p>bar</p>\n"));
    CHECK(cmm::parce(std::string("- <div>\n- foo\n")) == std::string("<ul>\n<li>\n<div>\n</li>\n<li>foo</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("<style>p{color:red;}</style>\n*foo*\n")) == std::string("<style>p{color:red;}</style>\n<p><em>foo</em></p>\n"));
    CHECK(cmm::parce(std::string("<!-- foo -->*bar*\n*baz*\n")) == std::string("<!-- foo -->*bar*\n<p><em>baz</em></p>\n"));
    CHECK(cmm::parce(std::string("<script>\nfoo\n</script>1. *bar*\n")) == std::string("<script>\nfoo\n</script>1. *bar*\n"));
    CHECK(cmm::parce(std::string("<!-- Foo\n\nbar\n   baz -->\nokay\n")) == std::string("<!-- Foo\n\nbar\n   baz -->\n<p>okay</p>\n"));
    CHECK(cmm::parce(std::string("<?php\n\n  echo '>';\n\n?>\nokay\n")) == std::string("<?php\n\n  echo '>';\n\n?>\n<p>okay</p>\n"));
    CHECK(cmm::parce(std::string("<!DOCTYPE html>\n")) == std::string("<!DOCTYPE html>\n"));
    CHECK(cmm::parce(std::string("<![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\nokay\n")) == std::string("<![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\n<p>okay</p>\n"));
    CHECK(cmm::parce(std::string("  <!-- foo -->\n\n    <!-- foo -->\n")) == std::string("  <!-- foo -->\n<pre><code>&lt;!-- foo --&gt;\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("  <div>\n\n    <div>\n")) == std::string("  <div>\n<pre><code>&lt;div&gt;\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("Foo\n<div>\nbar\n</div>\n")) == std::string("<p>Foo</p>\n<div>\nbar\n</div>\n"));
    CHECK(cmm::parce(std::string("<div>\nbar\n</div>\n*foo*\n")) == std::string("<div>\nbar\n</div>\n*foo*\n"));
    CHECK(cmm::parce(std::string("Foo\n<a href=\"bar\">\nbaz\n")) == std::string("<p>Foo\n<a href=\"bar\">\nbaz</p>\n"));
    CHECK(cmm::parce(std::string("<div>\n\n*Emphasized* text.\n\n</div>\n")) == std::string("<div>\n<p><em>Emphasized</em> text.</p>\n</div>\n"));
    CHECK(cmm::parce(std::string("<div>\n*Emphasized* text.\n</div>\n")) == std::string("<div>\n*Emphasized* text.\n</div>\n"));
    CHECK(cmm::parce(std::string("<table>\n\n<tr>\n\n<td>\nHi\n</td>\n\n</tr>\n\n</table>\n")) == std::string("<table>\n<tr>\n<td>\nHi\n</td>\n</tr>\n</table>\n"));
    CHECK(cmm::parce(std::string("<table>\n\n  <tr>\n\n    <td>\n      Hi\n    </td>\n\n  </tr>\n\n</table>\n")) == std::string("<table>\n  <tr>\n<pre><code>&lt;td&gt;\n  Hi\n&lt;/td&gt;\n</code></pre>\n  </tr>\n</table>\n"));
    CHECK(cmm::parce(std::string("[foo]: /url \"title\"\n\n[foo]\n")) == std::string("<p><a href=\"/url\" title=\"title\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("   [foo]: \n      /url  \n           'the title'  \n\n[foo]\n")) == std::string("<p><a href=\"/url\" title=\"the title\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[Foo*bar\\]]:my_(url) 'title (with parens)'\n\n[Foo*bar\\]]\n")) == std::string("<p><a href=\"my_(url)\" title=\"title (with parens)\">Foo*bar]</a></p>\n"));
    CHECK(cmm::parce(std::string("[Foo bar]:\n<my url>\n'title'\n\n[Foo bar]\n")) == std::string("<p><a href=\"my%20url\" title=\"title\">Foo bar</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo]: /url '\ntitle\nline1\nline2\n'\n\n[foo]\n")) == std::string("<p><a href=\"/url\" title=\"\ntitle\nline1\nline2\n\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo]: /url 'title\n\nwith blank line'\n\n[foo]\n")) == std::string("<p>[foo]: /url 'title</p>\n<p>with blank line'</p>\n<p>[foo]</p>\n"));
    CHECK(cmm::parce(std::string("[foo]:\n/url\n\n[foo]\n")) == std::string("<p><a href=\"/url\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo]:\n\n[foo]\n")) == std::string("<p>[foo]:</p>\n<p>[foo]</p>\n"));
    CHECK(cmm::parce(std::string("[foo]: <>\n\n[foo]\n")) == std::string("<p><a href=\"\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo]: <bar>(baz)\n\n[foo]\n")) == std::string("<p>[foo]: <bar>(baz)</p>\n<p>[foo]</p>\n"));
    CHECK(cmm::parce(std::string("[foo]: /url\\bar\\*baz \"foo\\\"bar\\baz\"\n\n[foo]\n")) == std::string("<p><a href=\"/url%5Cbar*baz\" title=\"foo&quot;bar\\baz\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo]\n\n[foo]: url\n")) == std::string("<p><a href=\"url\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo]\n\n[foo]: first\n[foo]: second\n")) == std::string("<p><a href=\"first\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[FOO]: /url\n\n[Foo]\n")) == std::string("<p><a href=\"/url\">Foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[ΑΓΩ]: /φου\n\n[αγω]\n")) == std::string("<p><a href=\"/%CF%86%CE%BF%CF%85\">αγω</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo]: /url\n")) == std::string(""));
    CHECK(cmm::parce(std::string("[\nfoo\n]: /url\nbar\n")) == std::string("<p>bar</p>\n"));
    CHECK(cmm::parce(std::string("[foo]: /url \"title\" ok\n")) == std::string("<p>[foo]: /url &quot;title&quot; ok</p>\n"));
    CHECK(cmm::parce(std::string("[foo]: /url\n\"title\" ok\n")) == std::string("<p>&quot;title&quot; ok</p>\n"));
    CHECK(cmm::parce(std::string("    [foo]: /url \"title\"\n\n[foo]\n")) == std::string("<pre><code>[foo]: /url &quot;title&quot;\n</code></pre>\n<p>[foo]</p>\n"));
    CHECK(cmm::parce(std::string("```\n[foo]: /url\n```\n\n[foo]\n")) == std::string("<pre><code>[foo]: /url\n</code></pre>\n<p>[foo]</p>\n"));
    CHECK(cmm::parce(std::string("Foo\n[bar]: /baz\n\n[bar]\n")) == std::string("<p>Foo\n[bar]: /baz</p>\n<p>[bar]</p>\n"));
    CHECK(cmm::parce(std::string("# [Foo]\n[foo]: /url\n> bar\n")) == std::string("<h1><a href=\"/url\">Foo</a></h1>\n<blockquote>\n<p>bar</p>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("[foo]: /url\nbar\n===\n[foo]\n")) == std::string("<h1>bar</h1>\n<p><a href=\"/url\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo]: /url\n===\n[foo]\n")) == std::string("<p>===\n<a href=\"/url\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo]: /foo-url \"foo\"\n[bar]: /bar-url\n  \"bar\"\n[baz]: /baz-url\n\n[foo],\n[bar],\n[baz]\n")) == std::string("<p><a href=\"/foo-url\" title=\"foo\">foo</a>,\n<a href=\"/bar-url\" title=\"bar\">bar</a>,\n<a href=\"/baz-url\">baz</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo]\n\n> [foo]: /url\n")) == std::string("<p><a href=\"/url\">foo</a></p>\n<blockquote>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("[foo]: /url\n")) == std::string(""));
    CHECK(cmm::parce(std::string("aaa\n\nbbb\n")) == std::string("<p>aaa</p>\n<p>bbb</p>\n"));
    CHECK(cmm::parce(std::string("aaa\nbbb\n\nccc\nddd\n")) == std::string("<p>aaa\nbbb</p>\n<p>ccc\nddd</p>\n"));
    CHECK(cmm::parce(std::string("aaa\n\n\nbbb\n")) == std::string("<p>aaa</p>\n<p>bbb</p>\n"));
    CHECK(cmm::parce(std::string("  aaa\n bbb\n")) == std::string("<p>aaa\nbbb</p>\n"));
    CHECK(cmm::parce(std::string("aaa\n             bbb\n                                       ccc\n")) == std::string("<p>aaa\nbbb\nccc</p>\n"));
    CHECK(cmm::parce(std::string("   aaa\nbbb\n")) == std::string("<p>aaa\nbbb</p>\n"));
    CHECK(cmm::parce(std::string("    aaa\nbbb\n")) == std::string("<pre><code>aaa\n</code></pre>\n<p>bbb</p>\n"));
    CHECK(cmm::parce(std::string("aaa     \nbbb     \n")) == std::string("<p>aaa<br />\nbbb</p>\n"));
    CHECK(cmm::parce(std::string("  \n\naaa\n  \n\n# aaa\n\n  \n")) == std::string("<p>aaa</p>\n<h1>aaa</h1>\n"));
    CHECK(cmm::parce(std::string("> # Foo\n> bar\n> baz\n")) == std::string("<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("># Foo\n>bar\n> baz\n")) == std::string("<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("   > # Foo\n   > bar\n > baz\n")) == std::string("<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("    > # Foo\n    > bar\n    > baz\n")) == std::string("<pre><code>&gt; # Foo\n&gt; bar\n&gt; baz\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("> # Foo\n> bar\nbaz\n")) == std::string("<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("> bar\nbaz\n> foo\n")) == std::string("<blockquote>\n<p>bar\nbaz\nfoo</p>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("> foo\n---\n")) == std::string("<blockquote>\n<p>foo</p>\n</blockquote>\n<hr />\n"));
    CHECK(cmm::parce(std::string("> - foo\n- bar\n")) == std::string("<blockquote>\n<ul>\n<li>foo</li>\n</ul>\n</blockquote>\n<ul>\n<li>bar</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string(">     foo\n    bar\n")) == std::string("<blockquote>\n<pre><code>foo\n</code></pre>\n</blockquote>\n<pre><code>bar\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("> ```\nfoo\n```\n")) == std::string("<blockquote>\n<pre><code></code></pre>\n</blockquote>\n<p>foo</p>\n<pre><code></code></pre>\n"));
    CHECK(cmm::parce(std::string("> foo\n    - bar\n")) == std::string("<blockquote>\n<p>foo\n- bar</p>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string(">\n")) == std::string("<blockquote>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string(">\n>  \n> \n")) == std::string("<blockquote>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string(">\n> foo\n>  \n")) == std::string("<blockquote>\n<p>foo</p>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("> foo\n\n> bar\n")) == std::string("<blockquote>\n<p>foo</p>\n</blockquote>\n<blockquote>\n<p>bar</p>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("> foo\n> bar\n")) == std::string("<blockquote>\n<p>foo\nbar</p>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("> foo\n>\n> bar\n")) == std::string("<blockquote>\n<p>foo</p>\n<p>bar</p>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("foo\n> bar\n")) == std::string("<p>foo</p>\n<blockquote>\n<p>bar</p>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("> aaa\n***\n> bbb\n")) == std::string("<blockquote>\n<p>aaa</p>\n</blockquote>\n<hr />\n<blockquote>\n<p>bbb</p>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("> bar\nbaz\n")) == std::string("<blockquote>\n<p>bar\nbaz</p>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("> bar\n\nbaz\n")) == std::string("<blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>\n"));
    CHECK(cmm::parce(std::string("> bar\n>\nbaz\n")) == std::string("<blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>\n"));
    CHECK(cmm::parce(std::string("> > > foo\nbar\n")) == std::string("<blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar</p>\n</blockquote>\n</blockquote>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string(">>> foo\n> bar\n>>baz\n")) == std::string("<blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar\nbaz</p>\n</blockquote>\n</blockquote>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string(">     code\n\n>    not code\n")) == std::string("<blockquote>\n<pre><code>code\n</code></pre>\n</blockquote>\n<blockquote>\n<p>not code</p>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("A paragraph\nwith two lines.\n\n    indented code\n\n> A block quote.\n")) == std::string("<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("1.  A paragraph\n    with two lines.\n\n        indented code\n\n    > A block quote.\n")) == std::string("<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("- one\n\n two\n")) == std::string("<ul>\n<li>one</li>\n</ul>\n<p>two</p>\n"));
    CHECK(cmm::parce(std::string("- one\n\n  two\n")) == std::string("<ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string(" -    one\n\n     two\n")) == std::string("<ul>\n<li>one</li>\n</ul>\n<pre><code> two\n</code></pre>\n"));
    CHECK(cmm::parce(std::string(" -    one\n\n      two\n")) == std::string("<ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("   > > 1.  one\n>>\n>>     two\n")) == std::string("<blockquote>\n<blockquote>\n<ol>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ol>\n</blockquote>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string(">>- one\n>>\n  >  > two\n")) == std::string("<blockquote>\n<blockquote>\n<ul>\n<li>one</li>\n</ul>\n<p>two</p>\n</blockquote>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("-one\n\n2.two\n")) == std::string("<p>-one</p>\n<p>2.two</p>\n"));
    CHECK(cmm::parce(std::string("- foo\n\n\n  bar\n")) == std::string("<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("1.  foo\n\n    ```\n    bar\n    ```\n\n    baz\n\n    > bam\n")) == std::string("<ol>\n<li>\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n<p>baz</p>\n<blockquote>\n<p>bam</p>\n</blockquote>\n</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("- Foo\n\n      bar\n\n\n      baz\n")) == std::string("<ul>\n<li>\n<p>Foo</p>\n<pre><code>bar\n\n\nbaz\n</code></pre>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("123456789. ok\n")) == std::string("<ol start=\"123456789\">\n<li>ok</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("1234567890. not ok\n")) == std::string("<p>1234567890. not ok</p>\n"));
    CHECK(cmm::parce(std::string("0. ok\n")) == std::string("<ol start=\"0\">\n<li>ok</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("003. ok\n")) == std::string("<ol start=\"3\">\n<li>ok</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("-1. not ok\n")) == std::string("<p>-1. not ok</p>\n"));
    CHECK(cmm::parce(std::string("- foo\n\n      bar\n")) == std::string("<ul>\n<li>\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("  10.  foo\n\n           bar\n")) == std::string("<ol start=\"10\">\n<li>\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("    indented code\n\nparagraph\n\n    more code\n")) == std::string("<pre><code>indented code\n</code></pre>\n<p>paragraph</p>\n<pre><code>more code\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("1.     indented code\n\n   paragraph\n\n       more code\n")) == std::string("<ol>\n<li>\n<pre><code>indented code\n</code></pre>\n<p>paragraph</p>\n<pre><code>more code\n</code></pre>\n</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("1.      indented code\n\n   paragraph\n\n       more code\n")) == std::string("<ol>\n<li>\n<pre><code> indented code\n</code></pre>\n<p>paragraph</p>\n<pre><code>more code\n</code></pre>\n</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("   foo\n\nbar\n")) == std::string("<p>foo</p>\n<p>bar</p>\n"));
    CHECK(cmm::parce(std::string("-    foo\n\n  bar\n")) == std::string("<ul>\n<li>foo</li>\n</ul>\n<p>bar</p>\n"));
    CHECK(cmm::parce(std::string("-  foo\n\n   bar\n")) == std::string("<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("-\n  foo\n-\n  ```\n  bar\n  ```\n-\n      baz\n")) == std::string("<ul>\n<li>foo</li>\n<li>\n<pre><code>bar\n</code></pre>\n</li>\n<li>\n<pre><code>baz\n</code></pre>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("-   \n  foo\n")) == std::string("<ul>\n<li>foo</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("-\n\n  foo\n")) == std::string("<ul>\n<li></li>\n</ul>\n<p>foo</p>\n"));
    CHECK(cmm::parce(std::string("- foo\n-\n- bar\n")) == std::string("<ul>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("- foo\n-   \n- bar\n")) == std::string("<ul>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("1. foo\n2.\n3. bar\n")) == std::string("<ol>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("*\n")) == std::string("<ul>\n<li></li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("foo\n*\n\nfoo\n1.\n")) == std::string("<p>foo\n*</p>\n<p>foo\n1.</p>\n"));
    CHECK(cmm::parce(std::string(" 1.  A paragraph\n     with two lines.\n\n         indented code\n\n     > A block quote.\n")) == std::string("<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("  1.  A paragraph\n      with two lines.\n\n          indented code\n\n      > A block quote.\n")) == std::string("<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("   1.  A paragraph\n       with two lines.\n\n           indented code\n\n       > A block quote.\n")) == std::string("<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("    1.  A paragraph\n        with two lines.\n\n            indented code\n\n        > A block quote.\n")) == std::string("<pre><code>1.  A paragraph\n    with two lines.\n\n        indented code\n\n    &gt; A block quote.\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("  1.  A paragraph\nwith two lines.\n\n          indented code\n\n      > A block quote.\n")) == std::string("<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("  1.  A paragraph\n    with two lines.\n")) == std::string("<ol>\n<li>A paragraph\nwith two lines.</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("> 1. > Blockquote\ncontinued here.\n")) == std::string("<blockquote>\n<ol>\n<li>\n<blockquote>\n<p>Blockquote\ncontinued here.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("> 1. > Blockquote\n> continued here.\n")) == std::string("<blockquote>\n<ol>\n<li>\n<blockquote>\n<p>Blockquote\ncontinued here.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n"));
    CHECK(cmm::parce(std::string("- foo\n  - bar\n    - baz\n      - boo\n")) == std::string("<ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>baz\n<ul>\n<li>boo</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("- foo\n - bar\n  - baz\n   - boo\n")) == std::string("<ul>\n<li>foo</li>\n<li>bar</li>\n<li>baz</li>\n<li>boo</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("10) foo\n    - bar\n")) == std::string("<ol start=\"10\">\n<li>foo\n<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("10) foo\n   - bar\n")) == std::string("<ol start=\"10\">\n<li>foo</li>\n</ol>\n<ul>\n<li>bar</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("- - foo\n")) == std::string("<ul>\n<li>\n<ul>\n<li>foo</li>\n</ul>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("1. - 2. foo\n")) == std::string("<ol>\n<li>\n<ul>\n<li>\n<ol start=\"2\">\n<li>foo</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("- # Foo\n- Bar\n  ---\n  baz\n")) == std::string("<ul>\n<li>\n<h1>Foo</h1>\n</li>\n<li>\n<h2>Bar</h2>\nbaz</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("- foo\n- bar\n+ baz\n")) == std::string("<ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<ul>\n<li>baz</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("1. foo\n2. bar\n3) baz\n")) == std::string("<ol>\n<li>foo</li>\n<li>bar</li>\n</ol>\n<ol start=\"3\">\n<li>baz</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("Foo\n- bar\n- baz\n")) == std::string("<p>Foo</p>\n<ul>\n<li>bar</li>\n<li>baz</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("The number of windows in my house is\n14.  The number of doors is 6.\n")) == std::string("<p>The number of windows in my house is\n14.  The number of doors is 6.</p>\n"));
    CHECK(cmm::parce(std::string("The number of windows in my house is\n1.  The number of doors is 6.\n")) == std::string("<p>The number of windows in my house is</p>\n<ol>\n<li>The number of doors is 6.</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("- foo\n\n- bar\n\n\n- baz\n")) == std::string("<ul>\n<li>\n<p>foo</p>\n</li>\n<li>\n<p>bar</p>\n</li>\n<li>\n<p>baz</p>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("- foo\n  - bar\n    - baz\n\n\n      bim\n")) == std::string("<ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>\n<p>baz</p>\n<p>bim</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("- foo\n- bar\n\n<!-- -->\n\n- baz\n- bim\n")) == std::string("<ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<!-- -->\n<ul>\n<li>baz</li>\n<li>bim</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("-   foo\n\n    notcode\n\n-   foo\n\n<!-- -->\n\n    code\n")) == std::string("<ul>\n<li>\n<p>foo</p>\n<p>notcode</p>\n</li>\n<li>\n<p>foo</p>\n</li>\n</ul>\n<!-- -->\n<pre><code>code\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("- a\n - b\n  - c\n   - d\n  - e\n - f\n- g\n")) == std::string("<ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d</li>\n<li>e</li>\n<li>f</li>\n<li>g</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("1. a\n\n  2. b\n\n   3. c\n")) == std::string("<ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("- a\n - b\n  - c\n   - d\n    - e\n")) == std::string("<ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d\n- e</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("1. a\n\n  2. b\n\n    3. c\n")) == std::string("<ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n</ol>\n<pre><code>3. c\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("- a\n- b\n\n- c\n")) == std::string("<ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("* a\n*\n\n* c\n")) == std::string("<ul>\n<li>\n<p>a</p>\n</li>\n<li></li>\n<li>\n<p>c</p>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("- a\n- b\n\n  c\n- d\n")) == std::string("<ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("- a\n- b\n\n  [ref]: /url\n- d\n")) == std::string("<ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("- a\n- ```\n  b\n\n\n  ```\n- c\n")) == std::string("<ul>\n<li>a</li>\n<li>\n<pre><code>b\n\n\n</code></pre>\n</li>\n<li>c</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("- a\n  - b\n\n    c\n- d\n")) == std::string("<ul>\n<li>a\n<ul>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n</ul>\n</li>\n<li>d</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("* a\n  > b\n  >\n* c\n")) == std::string("<ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n</li>\n<li>c</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("- a\n  > b\n  ```\n  c\n  ```\n- d\n")) == std::string("<ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n<pre><code>c\n</code></pre>\n</li>\n<li>d</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("- a\n")) == std::string("<ul>\n<li>a</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("- a\n  - b\n")) == std::string("<ul>\n<li>a\n<ul>\n<li>b</li>\n</ul>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("1. ```\n   foo\n   ```\n\n   bar\n")) == std::string("<ol>\n<li>\n<pre><code>foo\n</code></pre>\n<p>bar</p>\n</li>\n</ol>\n"));
    CHECK(cmm::parce(std::string("* foo\n  * bar\n\n  baz\n")) == std::string("<ul>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n<p>baz</p>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("- a\n  - b\n  - c\n\n- d\n  - e\n  - f\n")) == std::string("<ul>\n<li>\n<p>a</p>\n<ul>\n<li>b</li>\n<li>c</li>\n</ul>\n</li>\n<li>\n<p>d</p>\n<ul>\n<li>e</li>\n<li>f</li>\n</ul>\n</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("`hi`lo`\n")) == std::string("<p><code>hi</code>lo`</p>\n"));
    CHECK(cmm::parce(std::string("\\!\\\"\\#\\$\\%\\&\\'\\(\\)\\*\\+\\,\\-\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\\\\\]\\^\\_\\`\\{\\|\\}\\~\n")) == std::string("<p>!&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~</p>\n"));
    CHECK(cmm::parce(std::string("\\\t\\A\\a\\ \\3\\φ\\«\n")) == std::string("<p>\\\t\\A\\a\\ \\3\\φ\\«</p>\n"));
    CHECK(cmm::parce(std::string("\\*not emphasized*\n\\<br/> not a tag\n\\[not a link](/foo)\n\\`not code`\n1\\. not a list\n\\* not a list\n\\# not a heading\n\\[foo]: /url \"not a reference\"\n\\&ouml; not a character entity\n")) == std::string("<p>*not emphasized*\n&lt;br/&gt; not a tag\n[not a link](/foo)\n`not code`\n1. not a list\n* not a list\n# not a heading\n[foo]: /url &quot;not a reference&quot;\n&amp;ouml; not a character entity</p>\n"));
    CHECK(cmm::parce(std::string("\\\\*emphasis*\n")) == std::string("<p>\\<em>emphasis</em></p>\n"));
    CHECK(cmm::parce(std::string("foo\\\nbar\n")) == std::string("<p>foo<br />\nbar</p>\n"));
    CHECK(cmm::parce(std::string("`` \\[\\` ``\n")) == std::string("<p><code>\\[\\`</code></p>\n"));
    CHECK(cmm::parce(std::string("    \\[\\]\n")) == std::string("<pre><code>\\[\\]\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("~~~\n\\[\\]\n~~~\n")) == std::string("<pre><code>\\[\\]\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("<http://example.com?find=\\*>\n")) == std::string("<p><a href=\"http://example.com?find=%5C*\">http://example.com?find=\\*</a></p>\n"));
    CHECK(cmm::parce(std::string("<a href=\"/bar\\/)\">\n")) == std::string("<a href=\"/bar\\/)\">\n"));
    CHECK(cmm::parce(std::string("[foo](/bar\\* \"ti\\*tle\")\n")) == std::string("<p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo]\n\n[foo]: /bar\\* \"ti\\*tle\"\n")) == std::string("<p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("``` foo\\+bar\nfoo\n```\n")) == std::string("<pre><code class=\"language-foo+bar\">foo\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("&nbsp; &amp; &copy; &AElig; &Dcaron;\n&frac34; &HilbertSpace; &DifferentialD;\n&ClockwiseContourIntegral; &ngE;\n")) == std::string("<p>  &amp; © Æ Ď\n¾ ℋ ⅆ\n∲ ≧̸</p>\n"));
    CHECK(cmm::parce(std::string("&#35; &#1234; &#992; &#0;\n")) == std::string("<p># Ӓ Ϡ �</p>\n"));
    CHECK(cmm::parce(std::string("&#X22; &#XD06; &#xcab;\n")) == std::string("<p>&quot; ആ ಫ</p>\n"));
    CHECK(cmm::parce(std::string("&nbsp &x; &#; &#x;\n&#987654321;\n&#abcdef0;\n&ThisIsNotDefined; &hi?;\n")) == std::string("<p>&amp;nbsp &amp;x; &amp;#; &amp;#x;\n&amp;#987654321;\n&amp;#abcdef0;\n&amp;ThisIsNotDefined; &amp;hi?;</p>\n"));
    CHECK(cmm::parce(std::string("&copy\n")) == std::string("<p>&amp;copy</p>\n"));
    CHECK(cmm::parce(std::string("&MadeUpEntity;\n")) == std::string("<p>&amp;MadeUpEntity;</p>\n"));
    CHECK(cmm::parce(std::string("<a href=\"&ouml;&ouml;.html\">\n")) == std::string("<a href=\"&ouml;&ouml;.html\">\n"));
    CHECK(cmm::parce(std::string("[foo](/f&ouml;&ouml; \"f&ouml;&ouml;\")\n")) == std::string("<p><a href=\"/f%C3%B6%C3%B6\" title=\"föö\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo]\n\n[foo]: /f&ouml;&ouml; \"f&ouml;&ouml;\"\n")) == std::string("<p><a href=\"/f%C3%B6%C3%B6\" title=\"föö\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("``` f&ouml;&ouml;\nfoo\n```\n")) == std::string("<pre><code class=\"language-föö\">foo\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("`f&ouml;&ouml;`\n")) == std::string("<p><code>f&amp;ouml;&amp;ouml;</code></p>\n"));
    CHECK(cmm::parce(std::string("    f&ouml;f&ouml;\n")) == std::string("<pre><code>f&amp;ouml;f&amp;ouml;\n</code></pre>\n"));
    CHECK(cmm::parce(std::string("&#42;foo&#42;\n*foo*\n")) == std::string("<p>*foo*\n<em>foo</em></p>\n"));
    CHECK(cmm::parce(std::string("&#42; foo\n\n* foo\n")) == std::string("<p>* foo</p>\n<ul>\n<li>foo</li>\n</ul>\n"));
    CHECK(cmm::parce(std::string("foo&#10;&#10;bar\n")) == std::string("<p>foo\n\nbar</p>\n"));
    CHECK(cmm::parce(std::string("&#9;foo\n")) == std::string("<p>\tfoo</p>\n"));
    CHECK(cmm::parce(std::string("[a](url &quot;tit&quot;)\n")) == std::string("<p>[a](url &quot;tit&quot;)</p>\n"));
    CHECK(cmm::parce(std::string("`foo`\n")) == std::string("<p><code>foo</code></p>\n"));
    CHECK(cmm::parce(std::string("`` foo ` bar ``\n")) == std::string("<p><code>foo ` bar</code></p>\n"));
    CHECK(cmm::parce(std::string("` `` `\n")) == std::string("<p><code>``</code></p>\n"));
    CHECK(cmm::parce(std::string("`  ``  `\n")) == std::string("<p><code> `` </code></p>\n"));
    CHECK(cmm::parce(std::string("` a`\n")) == std::string("<p><code> a</code></p>\n"));
    CHECK(cmm::parce(std::string("` b `\n")) == std::string("<p><code> b </code></p>\n"));
    CHECK(cmm::parce(std::string("` `\n`  `\n")) == std::string("<p><code> </code>\n<code>  </code></p>\n"));
    CHECK(cmm::parce(std::string("``\nfoo\nbar  \nbaz\n``\n")) == std::string("<p><code>foo bar   baz</code></p>\n"));
    CHECK(cmm::parce(std::string("``\nfoo \n``\n")) == std::string("<p><code>foo </code></p>\n"));
    CHECK(cmm::parce(std::string("`foo   bar \nbaz`\n")) == std::string("<p><code>foo   bar  baz</code></p>\n"));
    CHECK(cmm::parce(std::string("`foo\\`bar`\n")) == std::string("<p><code>foo\\</code>bar`</p>\n"));
    CHECK(cmm::parce(std::string("``foo`bar``\n")) == std::string("<p><code>foo`bar</code></p>\n"));
    CHECK(cmm::parce(std::string("` foo `` bar `\n")) == std::string("<p><code>foo `` bar</code></p>\n"));
    CHECK(cmm::parce(std::string("*foo`*`\n")) == std::string("<p>*foo<code>*</code></p>\n"));
    CHECK(cmm::parce(std::string("[not a `link](/foo`)\n")) == std::string("<p>[not a <code>link](/foo</code>)</p>\n"));
    CHECK(cmm::parce(std::string("`<a href=\"`\">`\n")) == std::string("<p><code>&lt;a href=&quot;</code>&quot;&gt;`</p>\n"));
    CHECK(cmm::parce(std::string("<a href=\"`\">`\n")) == std::string("<p><a href=\"`\">`</p>\n"));
    CHECK(cmm::parce(std::string("`<http://foo.bar.`baz>`\n")) == std::string("<p><code>&lt;http://foo.bar.</code>baz&gt;`</p>\n"));
    CHECK(cmm::parce(std::string("<http://foo.bar.`baz>`\n")) == std::string("<p><a href=\"http://foo.bar.%60baz\">http://foo.bar.`baz</a>`</p>\n"));
    CHECK(cmm::parce(std::string("```foo``\n")) == std::string("<p>```foo``</p>\n"));
    CHECK(cmm::parce(std::string("`foo\n")) == std::string("<p>`foo</p>\n"));
    CHECK(cmm::parce(std::string("`foo``bar``\n")) == std::string("<p>`foo<code>bar</code></p>\n"));
    CHECK(cmm::parce(std::string("*foo bar*\n")) == std::string("<p><em>foo bar</em></p>\n"));
    CHECK(cmm::parce(std::string("a * foo bar*\n")) == std::string("<p>a * foo bar*</p>\n"));
    CHECK(cmm::parce(std::string("a*\"foo\"*\n")) == std::string("<p>a*&quot;foo&quot;*</p>\n"));
    CHECK(cmm::parce(std::string("* a *\n")) == std::string("<p>* a *</p>\n"));
    CHECK(cmm::parce(std::string("foo*bar*\n")) == std::string("<p>foo<em>bar</em></p>\n"));
    CHECK(cmm::parce(std::string("5*6*78\n")) == std::string("<p>5<em>6</em>78</p>\n"));
    CHECK(cmm::parce(std::string("_foo bar_\n")) == std::string("<p><em>foo bar</em></p>\n"));
    CHECK(cmm::parce(std::string("_ foo bar_\n")) == std::string("<p>_ foo bar_</p>\n"));
    CHECK(cmm::parce(std::string("a_\"foo\"_\n")) == std::string("<p>a_&quot;foo&quot;_</p>\n"));
    CHECK(cmm::parce(std::string("foo_bar_\n")) == std::string("<p>foo_bar_</p>\n"));
    CHECK(cmm::parce(std::string("5_6_78\n")) == std::string("<p>5_6_78</p>\n"));
    CHECK(cmm::parce(std::string("пристаням_стремятся_\n")) == std::string("<p>пристаням_стремятся_</p>\n"));
    CHECK(cmm::parce(std::string("aa_\"bb\"_cc\n")) == std::string("<p>aa_&quot;bb&quot;_cc</p>\n"));
    CHECK(cmm::parce(std::string("foo-_(bar)_\n")) == std::string("<p>foo-<em>(bar)</em></p>\n"));
    CHECK(cmm::parce(std::string("_foo*\n")) == std::string("<p>_foo*</p>\n"));
    CHECK(cmm::parce(std::string("*foo bar *\n")) == std::string("<p>*foo bar *</p>\n"));
    CHECK(cmm::parce(std::string("*foo bar\n*\n")) == std::string("<p>*foo bar\n*</p>\n"));
    CHECK(cmm::parce(std::string("*(*foo)\n")) == std::string("<p>*(*foo)</p>\n"));
    CHECK(cmm::parce(std::string("*(*foo*)*\n")) == std::string("<p><em>(<em>foo</em>)</em></p>\n"));
    CHECK(cmm::parce(std::string("*foo*bar\n")) == std::string("<p><em>foo</em>bar</p>\n"));
    CHECK(cmm::parce(std::string("_foo bar _\n")) == std::string("<p>_foo bar _</p>\n"));
    CHECK(cmm::parce(std::string("_(_foo)\n")) == std::string("<p>_(_foo)</p>\n"));
    CHECK(cmm::parce(std::string("_(_foo_)_\n")) == std::string("<p><em>(<em>foo</em>)</em></p>\n"));
    CHECK(cmm::parce(std::string("_foo_bar\n")) == std::string("<p>_foo_bar</p>\n"));
    CHECK(cmm::parce(std::string("_пристаням_стремятся\n")) == std::string("<p>_пристаням_стремятся</p>\n"));
    CHECK(cmm::parce(std::string("_foo_bar_baz_\n")) == std::string("<p><em>foo_bar_baz</em></p>\n"));
    CHECK(cmm::parce(std::string("_(bar)_.\n")) == std::string("<p><em>(bar)</em>.</p>\n"));
    CHECK(cmm::parce(std::string("**foo bar**\n")) == std::string("<p><strong>foo bar</strong></p>\n"));
    CHECK(cmm::parce(std::string("** foo bar**\n")) == std::string("<p>** foo bar**</p>\n"));
    CHECK(cmm::parce(std::string("a**\"foo\"**\n")) == std::string("<p>a**&quot;foo&quot;**</p>\n"));
    CHECK(cmm::parce(std::string("foo**bar**\n")) == std::string("<p>foo<strong>bar</strong></p>\n"));
    CHECK(cmm::parce(std::string("__foo bar__\n")) == std::string("<p><strong>foo bar</strong></p>\n"));
    CHECK(cmm::parce(std::string("__ foo bar__\n")) == std::string("<p>__ foo bar__</p>\n"));
    CHECK(cmm::parce(std::string("__\nfoo bar__\n")) == std::string("<p>__\nfoo bar__</p>\n"));
    CHECK(cmm::parce(std::string("a__\"foo\"__\n")) == std::string("<p>a__&quot;foo&quot;__</p>\n"));
    CHECK(cmm::parce(std::string("foo__bar__\n")) == std::string("<p>foo__bar__</p>\n"));
    CHECK(cmm::parce(std::string("5__6__78\n")) == std::string("<p>5__6__78</p>\n"));
    CHECK(cmm::parce(std::string("пристаням__стремятся__\n")) == std::string("<p>пристаням__стремятся__</p>\n"));
    CHECK(cmm::parce(std::string("__foo, __bar__, baz__\n")) == std::string("<p><strong>foo, <strong>bar</strong>, baz</strong></p>\n"));
    CHECK(cmm::parce(std::string("foo-__(bar)__\n")) == std::string("<p>foo-<strong>(bar)</strong></p>\n"));
    CHECK(cmm::parce(std::string("**foo bar **\n")) == std::string("<p>**foo bar **</p>\n"));
    CHECK(cmm::parce(std::string("**(**foo)\n")) == std::string("<p>**(**foo)</p>\n"));
    CHECK(cmm::parce(std::string("*(**foo**)*\n")) == std::string("<p><em>(<strong>foo</strong>)</em></p>\n"));
    CHECK(cmm::parce(std::string("**Gomphocarpus (*Gomphocarpus physocarpus*, syn.\n*Asclepias physocarpa*)**\n")) == std::string("<p><strong>Gomphocarpus (<em>Gomphocarpus physocarpus</em>, syn.\n<em>Asclepias physocarpa</em>)</strong></p>\n"));
    CHECK(cmm::parce(std::string("**foo \"*bar*\" foo**\n")) == std::string("<p><strong>foo &quot;<em>bar</em>&quot; foo</strong></p>\n"));
    CHECK(cmm::parce(std::string("**foo**bar\n")) == std::string("<p><strong>foo</strong>bar</p>\n"));
    CHECK(cmm::parce(std::string("__foo bar __\n")) == std::string("<p>__foo bar __</p>\n"));
    CHECK(cmm::parce(std::string("__(__foo)\n")) == std::string("<p>__(__foo)</p>\n"));
    CHECK(cmm::parce(std::string("_(__foo__)_\n")) == std::string("<p><em>(<strong>foo</strong>)</em></p>\n"));
    CHECK(cmm::parce(std::string("__foo__bar\n")) == std::string("<p>__foo__bar</p>\n"));
    CHECK(cmm::parce(std::string("__пристаням__стремятся\n")) == std::string("<p>__пристаням__стремятся</p>\n"));
    CHECK(cmm::parce(std::string("__foo__bar__baz__\n")) == std::string("<p><strong>foo__bar__baz</strong></p>\n"));
    CHECK(cmm::parce(std::string("__(bar)__.\n")) == std::string("<p><strong>(bar)</strong>.</p>\n"));
    CHECK(cmm::parce(std::string("*foo [bar](/url)*\n")) == std::string("<p><em>foo <a href=\"/url\">bar</a></em></p>\n"));
    CHECK(cmm::parce(std::string("*foo\nbar*\n")) == std::string("<p><em>foo\nbar</em></p>\n"));
    CHECK(cmm::parce(std::string("_foo __bar__ baz_\n")) == std::string("<p><em>foo <strong>bar</strong> baz</em></p>\n"));
    CHECK(cmm::parce(std::string("_foo _bar_ baz_\n")) == std::string("<p><em>foo <em>bar</em> baz</em></p>\n"));
    CHECK(cmm::parce(std::string("__foo_ bar_\n")) == std::string("<p><em><em>foo</em> bar</em></p>\n"));
    CHECK(cmm::parce(std::string("*foo *bar**\n")) == std::string("<p><em>foo <em>bar</em></em></p>\n"));
    CHECK(cmm::parce(std::string("*foo **bar** baz*\n")) == std::string("<p><em>foo <strong>bar</strong> baz</em></p>\n"));
    CHECK(cmm::parce(std::string("*foo**bar**baz*\n")) == std::string("<p><em>foo<strong>bar</strong>baz</em></p>\n"));
    CHECK(cmm::parce(std::string("*foo**bar*\n")) == std::string("<p><em>foo**bar</em></p>\n"));
    CHECK(cmm::parce(std::string("***foo** bar*\n")) == std::string("<p><em><strong>foo</strong> bar</em></p>\n"));
    CHECK(cmm::parce(std::string("*foo **bar***\n")) == std::string("<p><em>foo <strong>bar</strong></em></p>\n"));
    CHECK(cmm::parce(std::string("*foo**bar***\n")) == std::string("<p><em>foo<strong>bar</strong></em></p>\n"));
    CHECK(cmm::parce(std::string("foo***bar***baz\n")) == std::string("<p>foo<em><strong>bar</strong></em>baz</p>\n"));
    CHECK(cmm::parce(std::string("foo******bar*********baz\n")) == std::string("<p>foo<strong><strong><strong>bar</strong></strong></strong>***baz</p>\n"));
    CHECK(cmm::parce(std::string("*foo **bar *baz* bim** bop*\n")) == std::string("<p><em>foo <strong>bar <em>baz</em> bim</strong> bop</em></p>\n"));
    CHECK(cmm::parce(std::string("*foo [*bar*](/url)*\n")) == std::string("<p><em>foo <a href=\"/url\"><em>bar</em></a></em></p>\n"));
    CHECK(cmm::parce(std::string("** is not an empty emphasis\n")) == std::string("<p>** is not an empty emphasis</p>\n"));
    CHECK(cmm::parce(std::string("**** is not an empty strong emphasis\n")) == std::string("<p>**** is not an empty strong emphasis</p>\n"));
    CHECK(cmm::parce(std::string("**foo [bar](/url)**\n")) == std::string("<p><strong>foo <a href=\"/url\">bar</a></strong></p>\n"));
    CHECK(cmm::parce(std::string("**foo\nbar**\n")) == std::string("<p><strong>foo\nbar</strong></p>\n"));
    CHECK(cmm::parce(std::string("__foo _bar_ baz__\n")) == std::string("<p><strong>foo <em>bar</em> baz</strong></p>\n"));
    CHECK(cmm::parce(std::string("__foo __bar__ baz__\n")) == std::string("<p><strong>foo <strong>bar</strong> baz</strong></p>\n"));
    CHECK(cmm::parce(std::string("____foo__ bar__\n")) == std::string("<p><strong><strong>foo</strong> bar</strong></p>\n"));
    CHECK(cmm::parce(std::string("**foo **bar****\n")) == std::string("<p><strong>foo <strong>bar</strong></strong></p>\n"));
    CHECK(cmm::parce(std::string("**foo *bar* baz**\n")) == std::string("<p><strong>foo <em>bar</em> baz</strong></p>\n"));
    CHECK(cmm::parce(std::string("**foo*bar*baz**\n")) == std::string("<p><strong>foo<em>bar</em>baz</strong></p>\n"));
    CHECK(cmm::parce(std::string("***foo* bar**\n")) == std::string("<p><strong><em>foo</em> bar</strong></p>\n"));
    CHECK(cmm::parce(std::string("**foo *bar***\n")) == std::string("<p><strong>foo <em>bar</em></strong></p>\n"));
    CHECK(cmm::parce(std::string("**foo *bar **baz**\nbim* bop**\n")) == std::string("<p><strong>foo <em>bar <strong>baz</strong>\nbim</em> bop</strong></p>\n"));
    CHECK(cmm::parce(std::string("**foo [*bar*](/url)**\n")) == std::string("<p><strong>foo <a href=\"/url\"><em>bar</em></a></strong></p>\n"));
    CHECK(cmm::parce(std::string("__ is not an empty emphasis\n")) == std::string("<p>__ is not an empty emphasis</p>\n"));
    CHECK(cmm::parce(std::string("____ is not an empty strong emphasis\n")) == std::string("<p>____ is not an empty strong emphasis</p>\n"));
    CHECK(cmm::parce(std::string("foo ***\n")) == std::string("<p>foo ***</p>\n"));
    CHECK(cmm::parce(std::string("foo *\\**\n")) == std::string("<p>foo <em>*</em></p>\n"));
    CHECK(cmm::parce(std::string("foo *_*\n")) == std::string("<p>foo <em>_</em></p>\n"));
    CHECK(cmm::parce(std::string("foo *****\n")) == std::string("<p>foo *****</p>\n"));
    CHECK(cmm::parce(std::string("foo **\\***\n")) == std::string("<p>foo <strong>*</strong></p>\n"));
    CHECK(cmm::parce(std::string("foo **_**\n")) == std::string("<p>foo <strong>_</strong></p>\n"));
    CHECK(cmm::parce(std::string("**foo*\n")) == std::string("<p>*<em>foo</em></p>\n"));
    CHECK(cmm::parce(std::string("*foo**\n")) == std::string("<p><em>foo</em>*</p>\n"));
    CHECK(cmm::parce(std::string("***foo**\n")) == std::string("<p>*<strong>foo</strong></p>\n"));
    CHECK(cmm::parce(std::string("****foo*\n")) == std::string("<p>***<em>foo</em></p>\n"));
    CHECK(cmm::parce(std::string("**foo***\n")) == std::string("<p><strong>foo</strong>*</p>\n"));
    CHECK(cmm::parce(std::string("*foo****\n")) == std::string("<p><em>foo</em>***</p>\n"));
    CHECK(cmm::parce(std::string("foo ___\n")) == std::string("<p>foo ___</p>\n"));
    CHECK(cmm::parce(std::string("foo _\\__\n")) == std::string("<p>foo <em>_</em></p>\n"));
    CHECK(cmm::parce(std::string("foo _*_\n")) == std::string("<p>foo <em>*</em></p>\n"));
    CHECK(cmm::parce(std::string("foo _____\n")) == std::string("<p>foo _____</p>\n"));
    CHECK(cmm::parce(std::string("foo __\\___\n")) == std::string("<p>foo <strong>_</strong></p>\n"));
    CHECK(cmm::parce(std::string("foo __*__\n")) == std::string("<p>foo <strong>*</strong></p>\n"));
    CHECK(cmm::parce(std::string("__foo_\n")) == std::string("<p>_<em>foo</em></p>\n"));
    CHECK(cmm::parce(std::string("_foo__\n")) == std::string("<p><em>foo</em>_</p>\n"));
    CHECK(cmm::parce(std::string("___foo__\n")) == std::string("<p>_<strong>foo</strong></p>\n"));
    CHECK(cmm::parce(std::string("____foo_\n")) == std::string("<p>___<em>foo</em></p>\n"));
    CHECK(cmm::parce(std::string("__foo___\n")) == std::string("<p><strong>foo</strong>_</p>\n"));
    CHECK(cmm::parce(std::string("_foo____\n")) == std::string("<p><em>foo</em>___</p>\n"));
    CHECK(cmm::parce(std::string("**foo**\n")) == std::string("<p><strong>foo</strong></p>\n"));
    CHECK(cmm::parce(std::string("*_foo_*\n")) == std::string("<p><em><em>foo</em></em></p>\n"));
    CHECK(cmm::parce(std::string("__foo__\n")) == std::string("<p><strong>foo</strong></p>\n"));
    CHECK(cmm::parce(std::string("_*foo*_\n")) == std::string("<p><em><em>foo</em></em></p>\n"));
    CHECK(cmm::parce(std::string("****foo****\n")) == std::string("<p><strong><strong>foo</strong></strong></p>\n"));
    CHECK(cmm::parce(std::string("____foo____\n")) == std::string("<p><strong><strong>foo</strong></strong></p>\n"));
    CHECK(cmm::parce(std::string("******foo******\n")) == std::string("<p><strong><strong><strong>foo</strong></strong></strong></p>\n"));
    CHECK(cmm::parce(std::string("***foo***\n")) == std::string("<p><em><strong>foo</strong></em></p>\n"));
    CHECK(cmm::parce(std::string("_____foo_____\n")) == std::string("<p><em><strong><strong>foo</strong></strong></em></p>\n"));
    CHECK(cmm::parce(std::string("*foo _bar* baz_\n")) == std::string("<p><em>foo _bar</em> baz_</p>\n"));
    CHECK(cmm::parce(std::string("*foo __bar *baz bim__ bam*\n")) == std::string("<p><em>foo <strong>bar *baz bim</strong> bam</em></p>\n"));
    CHECK(cmm::parce(std::string("**foo **bar baz**\n")) == std::string("<p>**foo <strong>bar baz</strong></p>\n"));
    CHECK(cmm::parce(std::string("*foo *bar baz*\n")) == std::string("<p>*foo <em>bar baz</em></p>\n"));
    CHECK(cmm::parce(std::string("*[bar*](/url)\n")) == std::string("<p>*<a href=\"/url\">bar*</a></p>\n"));
    CHECK(cmm::parce(std::string("_foo [bar_](/url)\n")) == std::string("<p>_foo <a href=\"/url\">bar_</a></p>\n"));
    CHECK(cmm::parce(std::string("*<img src=\"foo\" title=\"*\"/>\n")) == std::string("<p>*<img src=\"foo\" title=\"*\"/></p>\n"));
    CHECK(cmm::parce(std::string("**<a href=\"**\">\n")) == std::string("<p>**<a href=\"**\"></p>\n"));
    CHECK(cmm::parce(std::string("__<a href=\"__\">\n")) == std::string("<p>__<a href=\"__\"></p>\n"));
    CHECK(cmm::parce(std::string("*a `*`*\n")) == std::string("<p><em>a <code>*</code></em></p>\n"));
    CHECK(cmm::parce(std::string("_a `_`_\n")) == std::string("<p><em>a <code>_</code></em></p>\n"));
    CHECK(cmm::parce(std::string("**a<http://foo.bar/?q=**>\n")) == std::string("<p>**a<a href=\"http://foo.bar/?q=**\">http://foo.bar/?q=**</a></p>\n"));
    CHECK(cmm::parce(std::string("__a<http://foo.bar/?q=__>\n")) == std::string("<p>__a<a href=\"http://foo.bar/?q=__\">http://foo.bar/?q=__</a></p>\n"));
    CHECK(cmm::parce(std::string("[link](/uri \"title\")\n")) == std::string("<p><a href=\"/uri\" title=\"title\">link</a></p>\n"));
    CHECK(cmm::parce(std::string("[link](/uri)\n")) == std::string("<p><a href=\"/uri\">link</a></p>\n"));
    CHECK(cmm::parce(std::string("[link]()\n")) == std::string("<p><a href=\"\">link</a></p>\n"));
    CHECK(cmm::parce(std::string("[link](<>)\n")) == std::string("<p><a href=\"\">link</a></p>\n"));
    CHECK(cmm::parce(std::string("[link](/my uri)\n")) == std::string("<p>[link](/my uri)</p>\n"));
    CHECK(cmm::parce(std::string("[link](</my uri>)\n")) == std::string("<p><a href=\"/my%20uri\">link</a></p>\n"));
    CHECK(cmm::parce(std::string("[link](foo\nbar)\n")) == std::string("<p>[link](foo\nbar)</p>\n"));
    CHECK(cmm::parce(std::string("[link](<foo\nbar>)\n")) == std::string("<p>[link](<foo\nbar>)</p>\n"));
    CHECK(cmm::parce(std::string("[a](<b)c>)\n")) == std::string("<p><a href=\"b)c\">a</a></p>\n"));
    CHECK(cmm::parce(std::string("[link](<foo\\>)\n")) == std::string("<p>[link](&lt;foo&gt;)</p>\n"));
    CHECK(cmm::parce(std::string("[a](<b)c\n[a](<b)c>\n[a](<b>c)\n")) == std::string("<p>[a](&lt;b)c\n[a](&lt;b)c&gt;\n[a](<b>c)</p>\n"));
    CHECK(cmm::parce(std::string("[link](\\(foo\\))\n")) == std::string("<p><a href=\"(foo)\">link</a></p>\n"));
    CHECK(cmm::parce(std::string("[link](foo(and(bar)))\n")) == std::string("<p><a href=\"foo(and(bar))\">link</a></p>\n"));
    CHECK(cmm::parce(std::string("[link](foo\\(and\\(bar\\))\n")) == std::string("<p><a href=\"foo(and(bar)\">link</a></p>\n"));
    CHECK(cmm::parce(std::string("[link](<foo(and(bar)>)\n")) == std::string("<p><a href=\"foo(and(bar)\">link</a></p>\n"));
    CHECK(cmm::parce(std::string("[link](foo\\)\\:)\n")) == std::string("<p><a href=\"foo):\">link</a></p>\n"));
    CHECK(cmm::parce(std::string("[link](#fragment)\n\n[link](http://example.com#fragment)\n\n[link](http://example.com?foo=3#frag)\n")) == std::string("<p><a href=\"#fragment\">link</a></p>\n<p><a href=\"http://example.com#fragment\">link</a></p>\n<p><a href=\"http://example.com?foo=3#frag\">link</a></p>\n"));
    CHECK(cmm::parce(std::string("[link](foo\\bar)\n")) == std::string("<p><a href=\"foo%5Cbar\">link</a></p>\n"));
    CHECK(cmm::parce(std::string("[link](foo%20b&auml;)\n")) == std::string("<p><a href=\"foo%20b%C3%A4\">link</a></p>\n"));
    CHECK(cmm::parce(std::string("[link](\"title\")\n")) == std::string("<p><a href=\"%22title%22\">link</a></p>\n"));
    CHECK(cmm::parce(std::string("[link](/url \"title\")\n[link](/url 'title')\n[link](/url (title))\n")) == std::string("<p><a href=\"/url\" title=\"title\">link</a>\n<a href=\"/url\" title=\"title\">link</a>\n<a href=\"/url\" title=\"title\">link</a></p>\n"));
    CHECK(cmm::parce(std::string("[link](/url \"title \\\"&quot;\")\n")) == std::string("<p><a href=\"/url\" title=\"title &quot;&quot;\">link</a></p>\n"));
    CHECK(cmm::parce(std::string("[link](/url \"title\")\n")) == std::string("<p><a href=\"/url%C2%A0%22title%22\">link</a></p>\n"));
    CHECK(cmm::parce(std::string("[link](/url \"title \"and\" title\")\n")) == std::string("<p>[link](/url &quot;title &quot;and&quot; title&quot;)</p>\n"));
    CHECK(cmm::parce(std::string("[link](/url 'title \"and\" title')\n")) == std::string("<p><a href=\"/url\" title=\"title &quot;and&quot; title\">link</a></p>\n"));
    CHECK(cmm::parce(std::string("[link](   /uri\n  \"title\"  )\n")) == std::string("<p><a href=\"/uri\" title=\"title\">link</a></p>\n"));
    CHECK(cmm::parce(std::string("[link] (/uri)\n")) == std::string("<p>[link] (/uri)</p>\n"));
    CHECK(cmm::parce(std::string("[link [foo [bar]]](/uri)\n")) == std::string("<p><a href=\"/uri\">link [foo [bar]]</a></p>\n"));
    CHECK(cmm::parce(std::string("[link] bar](/uri)\n")) == std::string("<p>[link] bar](/uri)</p>\n"));
    CHECK(cmm::parce(std::string("[link [bar](/uri)\n")) == std::string("<p>[link <a href=\"/uri\">bar</a></p>\n"));
    CHECK(cmm::parce(std::string("[link \\[bar](/uri)\n")) == std::string("<p><a href=\"/uri\">link [bar</a></p>\n"));
    CHECK(cmm::parce(std::string("[link *foo **bar** `#`*](/uri)\n")) == std::string("<p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>\n"));
    CHECK(cmm::parce(std::string("[![moon](moon.jpg)](/uri)\n")) == std::string("<p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>\n"));
    CHECK(cmm::parce(std::string("[foo [bar](/uri)](/uri)\n")) == std::string("<p>[foo <a href=\"/uri\">bar</a>](/uri)</p>\n"));
    CHECK(cmm::parce(std::string("[foo *[bar [baz](/uri)](/uri)*](/uri)\n")) == std::string("<p>[foo <em>[bar <a href=\"/uri\">baz</a>](/uri)</em>](/uri)</p>\n"));
    CHECK(cmm::parce(std::string("![[[foo](uri1)](uri2)](uri3)\n")) == std::string("<p><img src=\"uri3\" alt=\"[foo](uri2)\" /></p>\n"));
    CHECK(cmm::parce(std::string("*[foo*](/uri)\n")) == std::string("<p>*<a href=\"/uri\">foo*</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo *bar](baz*)\n")) == std::string("<p><a href=\"baz*\">foo *bar</a></p>\n"));
    CHECK(cmm::parce(std::string("*foo [bar* baz]\n")) == std::string("<p><em>foo [bar</em> baz]</p>\n"));
    CHECK(cmm::parce(std::string("[foo <bar attr=\"](baz)\">\n")) == std::string("<p>[foo <bar attr=\"](baz)\"></p>\n"));
    CHECK(cmm::parce(std::string("[foo`](/uri)`\n")) == std::string("<p>[foo<code>](/uri)</code></p>\n"));
    CHECK(cmm::parce(std::string("[foo<http://example.com/?search=](uri)>\n")) == std::string("<p>[foo<a href=\"http://example.com/?search=%5D(uri)\">http://example.com/?search=](uri)</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo][bar]\n\n[bar]: /url \"title\"\n")) == std::string("<p><a href=\"/url\" title=\"title\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[link [foo [bar]]][ref]\n\n[ref]: /uri\n")) == std::string("<p><a href=\"/uri\">link [foo [bar]]</a></p>\n"));
    CHECK(cmm::parce(std::string("[link \\[bar][ref]\n\n[ref]: /uri\n")) == std::string("<p><a href=\"/uri\">link [bar</a></p>\n"));
    CHECK(cmm::parce(std::string("[link *foo **bar** `#`*][ref]\n\n[ref]: /uri\n")) == std::string("<p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>\n"));
    CHECK(cmm::parce(std::string("[![moon](moon.jpg)][ref]\n\n[ref]: /uri\n")) == std::string("<p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>\n"));
    CHECK(cmm::parce(std::string("[foo [bar](/uri)][ref]\n\n[ref]: /uri\n")) == std::string("<p>[foo <a href=\"/uri\">bar</a>]<a href=\"/uri\">ref</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo *bar [baz][ref]*][ref]\n\n[ref]: /uri\n")) == std::string("<p>[foo <em>bar <a href=\"/uri\">baz</a></em>]<a href=\"/uri\">ref</a></p>\n"));
    CHECK(cmm::parce(std::string("*[foo*][ref]\n\n[ref]: /uri\n")) == std::string("<p>*<a href=\"/uri\">foo*</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo *bar][ref]\n\n[ref]: /uri\n")) == std::string("<p><a href=\"/uri\">foo *bar</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo <bar attr=\"][ref]\">\n\n[ref]: /uri\n")) == std::string("<p>[foo <bar attr=\"][ref]\"></p>\n"));
    CHECK(cmm::parce(std::string("[foo`][ref]`\n\n[ref]: /uri\n")) == std::string("<p>[foo<code>][ref]</code></p>\n"));
    CHECK(cmm::parce(std::string("[foo<http://example.com/?search=][ref]>\n\n[ref]: /uri\n")) == std::string("<p>[foo<a href=\"http://example.com/?search=%5D%5Bref%5D\">http://example.com/?search=][ref]</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo][BaR]\n\n[bar]: /url \"title\"\n")) == std::string("<p><a href=\"/url\" title=\"title\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[Толпой][Толпой] is a Russian word.\n\n[ТОЛПОЙ]: /url\n")) == std::string("<p><a href=\"/url\">Толпой</a> is a Russian word.</p>\n"));
    CHECK(cmm::parce(std::string("[Foo\n  bar]: /url\n\n[Baz][Foo bar]\n")) == std::string("<p><a href=\"/url\">Baz</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo] [bar]\n\n[bar]: /url \"title\"\n")) == std::string("<p>[foo] <a href=\"/url\" title=\"title\">bar</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo]\n[bar]\n\n[bar]: /url \"title\"\n")) == std::string("<p>[foo]\n<a href=\"/url\" title=\"title\">bar</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo]: /url1\n\n[foo]: /url2\n\n[bar][foo]\n")) == std::string("<p><a href=\"/url1\">bar</a></p>\n"));
    CHECK(cmm::parce(std::string("[bar][foo\\!]\n\n[foo!]: /url\n")) == std::string("<p>[bar][foo!]</p>\n"));
    CHECK(cmm::parce(std::string("[foo][ref[]\n\n[ref[]: /uri\n")) == std::string("<p>[foo][ref[]</p>\n<p>[ref[]: /uri</p>\n"));
    CHECK(cmm::parce(std::string("[foo][ref[bar]]\n\n[ref[bar]]: /uri\n")) == std::string("<p>[foo][ref[bar]]</p>\n<p>[ref[bar]]: /uri</p>\n"));
    CHECK(cmm::parce(std::string("[[[foo]]]\n\n[[[foo]]]: /url\n")) == std::string("<p>[[[foo]]]</p>\n<p>[[[foo]]]: /url</p>\n"));
    CHECK(cmm::parce(std::string("[foo][ref\\[]\n\n[ref\\[]: /uri\n")) == std::string("<p><a href=\"/uri\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[bar\\\\]: /uri\n\n[bar\\\\]\n")) == std::string("<p><a href=\"/uri\">bar\\</a></p>\n"));
    CHECK(cmm::parce(std::string("[]\n\n[]: /uri\n")) == std::string("<p>[]</p>\n<p>[]: /uri</p>\n"));
    CHECK(cmm::parce(std::string("[\n ]\n\n[\n ]: /uri\n")) == std::string("<p>[\n]</p>\n<p>[\n]: /uri</p>\n"));
    CHECK(cmm::parce(std::string("[foo][]\n\n[foo]: /url \"title\"\n")) == std::string("<p><a href=\"/url\" title=\"title\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[*foo* bar][]\n\n[*foo* bar]: /url \"title\"\n")) == std::string("<p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>\n"));
    CHECK(cmm::parce(std::string("[Foo][]\n\n[foo]: /url \"title\"\n")) == std::string("<p><a href=\"/url\" title=\"title\">Foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo] \n[]\n\n[foo]: /url \"title\"\n")) == std::string("<p><a href=\"/url\" title=\"title\">foo</a>\n[]</p>\n"));
    CHECK(cmm::parce(std::string("[foo]\n\n[foo]: /url \"title\"\n")) == std::string("<p><a href=\"/url\" title=\"title\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[*foo* bar]\n\n[*foo* bar]: /url \"title\"\n")) == std::string("<p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>\n"));
    CHECK(cmm::parce(std::string("[[*foo* bar]]\n\n[*foo* bar]: /url \"title\"\n")) == std::string("<p>[<a href=\"/url\" title=\"title\"><em>foo</em> bar</a>]</p>\n"));
    CHECK(cmm::parce(std::string("[[bar [foo]\n\n[foo]: /url\n")) == std::string("<p>[[bar <a href=\"/url\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[Foo]\n\n[foo]: /url \"title\"\n")) == std::string("<p><a href=\"/url\" title=\"title\">Foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo] bar\n\n[foo]: /url\n")) == std::string("<p><a href=\"/url\">foo</a> bar</p>\n"));
    CHECK(cmm::parce(std::string("\\[foo]\n\n[foo]: /url \"title\"\n")) == std::string("<p>[foo]</p>\n"));
    CHECK(cmm::parce(std::string("[foo*]: /url\n\n*[foo*]\n")) == std::string("<p>*<a href=\"/url\">foo*</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo][bar]\n\n[foo]: /url1\n[bar]: /url2\n")) == std::string("<p><a href=\"/url2\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo][]\n\n[foo]: /url1\n")) == std::string("<p><a href=\"/url1\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo]()\n\n[foo]: /url1\n")) == std::string("<p><a href=\"\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo](not a link)\n\n[foo]: /url1\n")) == std::string("<p><a href=\"/url1\">foo</a>(not a link)</p>\n"));
    CHECK(cmm::parce(std::string("[foo][bar][baz]\n\n[baz]: /url\n")) == std::string("<p>[foo]<a href=\"/url\">bar</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo][bar][baz]\n\n[baz]: /url1\n[bar]: /url2\n")) == std::string("<p><a href=\"/url2\">foo</a><a href=\"/url1\">baz</a></p>\n"));
    CHECK(cmm::parce(std::string("[foo][bar][baz]\n\n[baz]: /url1\n[foo]: /url2\n")) == std::string("<p>[foo]<a href=\"/url1\">bar</a></p>\n"));
    CHECK(cmm::parce(std::string("![foo](/url \"title\")\n")) == std::string("<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>\n"));
    CHECK(cmm::parce(std::string("![foo *bar*]\n\n[foo *bar*]: train.jpg \"train & tracks\"\n")) == std::string("<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>\n"));
    CHECK(cmm::parce(std::string("![foo ![bar](/url)](/url2)\n")) == std::string("<p><img src=\"/url2\" alt=\"foo bar\" /></p>\n"));
    CHECK(cmm::parce(std::string("![foo [bar](/url)](/url2)\n")) == std::string("<p><img src=\"/url2\" alt=\"foo bar\" /></p>\n"));
    CHECK(cmm::parce(std::string("![foo *bar*][]\n\n[foo *bar*]: train.jpg \"train & tracks\"\n")) == std::string("<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>\n"));
    CHECK(cmm::parce(std::string("![foo *bar*][foobar]\n\n[FOOBAR]: train.jpg \"train & tracks\"\n")) == std::string("<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>\n"));
    CHECK(cmm::parce(std::string("![foo](train.jpg)\n")) == std::string("<p><img src=\"train.jpg\" alt=\"foo\" /></p>\n"));
    CHECK(cmm::parce(std::string("My ![foo bar](/path/to/train.jpg  \"title\"   )\n")) == std::string("<p>My <img src=\"/path/to/train.jpg\" alt=\"foo bar\" title=\"title\" /></p>\n"));
    CHECK(cmm::parce(std::string("![foo](<url>)\n")) == std::string("<p><img src=\"url\" alt=\"foo\" /></p>\n"));
    CHECK(cmm::parce(std::string("![](/url)\n")) == std::string("<p><img src=\"/url\" alt=\"\" /></p>\n"));
    CHECK(cmm::parce(std::string("![foo][bar]\n\n[bar]: /url\n")) == std::string("<p><img src=\"/url\" alt=\"foo\" /></p>\n"));
    CHECK(cmm::parce(std::string("![foo][bar]\n\n[BAR]: /url\n")) == std::string("<p><img src=\"/url\" alt=\"foo\" /></p>\n"));
    CHECK(cmm::parce(std::string("![foo][]\n\n[foo]: /url \"title\"\n")) == std::string("<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>\n"));
    CHECK(cmm::parce(std::string("![*foo* bar][]\n\n[*foo* bar]: /url \"title\"\n")) == std::string("<p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>\n"));
    CHECK(cmm::parce(std::string("![Foo][]\n\n[foo]: /url \"title\"\n")) == std::string("<p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>\n"));
    CHECK(cmm::parce(std::string("![foo] \n[]\n\n[foo]: /url \"title\"\n")) == std::string("<p><img src=\"/url\" alt=\"foo\" title=\"title\" />\n[]</p>\n"));
    CHECK(cmm::parce(std::string("![foo]\n\n[foo]: /url \"title\"\n")) == std::string("<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>\n"));
    CHECK(cmm::parce(std::string("![*foo* bar]\n\n[*foo* bar]: /url \"title\"\n")) == std::string("<p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>\n"));
    CHECK(cmm::parce(std::string("![[foo]]\n\n[[foo]]: /url \"title\"\n")) == std::string("<p>![[foo]]</p>\n<p>[[foo]]: /url &quot;title&quot;</p>\n"));
    CHECK(cmm::parce(std::string("![Foo]\n\n[foo]: /url \"title\"\n")) == std::string("<p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>\n"));
    CHECK(cmm::parce(std::string("!\\[foo]\n\n[foo]: /url \"title\"\n")) == std::string("<p>![foo]</p>\n"));
    CHECK(cmm::parce(std::string("\\![foo]\n\n[foo]: /url \"title\"\n")) == std::string("<p>!<a href=\"/url\" title=\"title\">foo</a></p>\n"));
    CHECK(cmm::parce(std::string("<http://foo.bar.baz>\n")) == std::string("<p><a href=\"http://foo.bar.baz\">http://foo.bar.baz</a></p>\n"));
    CHECK(cmm::parce(std::string("<http://foo.bar.baz/test?q=hello&id=22&boolean>\n")) == std::string("<p><a href=\"http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean\">http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean</a></p>\n"));
    CHECK(cmm::parce(std::string("<irc://foo.bar:2233/baz>\n")) == std::string("<p><a href=\"irc://foo.bar:2233/baz\">irc://foo.bar:2233/baz</a></p>\n"));
    CHECK(cmm::parce(std::string("<MAILTO:FOO@BAR.BAZ>\n")) == std::string("<p><a href=\"MAILTO:FOO@BAR.BAZ\">MAILTO:FOO@BAR.BAZ</a></p>\n"));
    CHECK(cmm::parce(std::string("<a+b+c:d>\n")) == std::string("<p><a href=\"a+b+c:d\">a+b+c:d</a></p>\n"));
    CHECK(cmm::parce(std::string("<made-up-scheme://foo,bar>\n")) == std::string("<p><a href=\"made-up-scheme://foo,bar\">made-up-scheme://foo,bar</a></p>\n"));
    CHECK(cmm::parce(std::string("<http://../>\n")) == std::string("<p><a href=\"http://../\">http://../</a></p>\n"));
    CHECK(cmm::parce(std::string("<localhost:5001/foo>\n")) == std::string("<p><a href=\"localhost:5001/foo\">localhost:5001/foo</a></p>\n"));
    CHECK(cmm::parce(std::string("<http://foo.bar/baz bim>\n")) == std::string("<p>&lt;http://foo.bar/baz bim&gt;</p>\n"));
    CHECK(cmm::parce(std::string("<http://example.com/\\[\\>\n")) == std::string("<p><a href=\"http://example.com/%5C%5B%5C\">http://example.com/\\[\\</a></p>\n"));
    CHECK(cmm::parce(std::string("<foo@bar.example.com>\n")) == std::string("<p><a href=\"mailto:foo@bar.example.com\">foo@bar.example.com</a></p>\n"));
    CHECK(cmm::parce(std::string("<foo+special@Bar.baz-bar0.com>\n")) == std::string("<p><a href=\"mailto:foo+special@Bar.baz-bar0.com\">foo+special@Bar.baz-bar0.com</a></p>\n"));
    CHECK(cmm::parce(std::string("<foo\\+@bar.example.com>\n")) == std::string("<p>&lt;foo+@bar.example.com&gt;</p>\n"));
    CHECK(cmm::parce(std::string("<>\n")) == std::string("<p>&lt;&gt;</p>\n"));
    CHECK(cmm::parce(std::string("< http://foo.bar >\n")) == std::string("<p>&lt; http://foo.bar &gt;</p>\n"));
    CHECK(cmm::parce(std::string("<m:abc>\n")) == std::string("<p>&lt;m:abc&gt;</p>\n"));
    CHECK(cmm::parce(std::string("<foo.bar.baz>\n")) == std::string("<p>&lt;foo.bar.baz&gt;</p>\n"));
    CHECK(cmm::parce(std::string("http://example.com\n")) == std::string("<p>http://example.com</p>\n"));
    CHECK(cmm::parce(std::string("foo@bar.example.com\n")) == std::string("<p>foo@bar.example.com</p>\n"));
    CHECK(cmm::parce(std::string("<a><bab><c2c>\n")) == std::string("<p><a><bab><c2c></p>\n"));
    CHECK(cmm::parce(std::string("<a/><b2/>\n")) == std::string("<p><a/><b2/></p>\n"));
    CHECK(cmm::parce(std::string("<a  /><b2\ndata=\"foo\" >\n")) == std::string("<p><a  /><b2\ndata=\"foo\" ></p>\n"));
    CHECK(cmm::parce(std::string("<a foo=\"bar\" bam = 'baz <em>\"</em>'\n_boolean zoop:33=zoop:33 />\n")) == std::string("<p><a foo=\"bar\" bam = 'baz <em>\"</em>'\n_boolean zoop:33=zoop:33 /></p>\n"));
    CHECK(cmm::parce(std::string("Foo <responsive-image src=\"foo.jpg\" />\n")) == std::string("<p>Foo <responsive-image src=\"foo.jpg\" /></p>\n"));
    CHECK(cmm::parce(std::string("<33> <__>\n")) == std::string("<p>&lt;33&gt; &lt;__&gt;</p>\n"));
    CHECK(cmm::parce(std::string("<a h*#ref=\"hi\">\n")) == std::string("<p>&lt;a h*#ref=&quot;hi&quot;&gt;</p>\n"));
    CHECK(cmm::parce(std::string("<a href=\"hi'> <a href=hi'>\n")) == std::string("<p>&lt;a href=&quot;hi'&gt; &lt;a href=hi'&gt;</p>\n"));
    CHECK(cmm::parce(std::string("< a><\nfoo><bar/ >\n<foo bar=baz\nbim!bop />\n")) == std::string("<p>&lt; a&gt;&lt;\nfoo&gt;&lt;bar/ &gt;\n&lt;foo bar=baz\nbim!bop /&gt;</p>\n"));
    CHECK(cmm::parce(std::string("<a href='bar'title=title>\n")) == std::string("<p>&lt;a href='bar'title=title&gt;</p>\n"));
    CHECK(cmm::parce(std::string("</a></foo >\n")) == std::string("<p></a></foo ></p>\n"));
    CHECK(cmm::parce(std::string("</a href=\"foo\">\n")) == std::string("<p>&lt;/a href=&quot;foo&quot;&gt;</p>\n"));
    CHECK(cmm::parce(std::string("foo <!-- this is a\ncomment - with hyphen -->\n")) == std::string("<p>foo <!-- this is a\ncomment - with hyphen --></p>\n"));
    CHECK(cmm::parce(std::string("foo <!-- not a comment -- two hyphens -->\n")) == std::string("<p>foo &lt;!-- not a comment -- two hyphens --&gt;</p>\n"));
    CHECK(cmm::parce(std::string("foo <!--> foo -->\n\nfoo <!-- foo--->\n")) == std::string("<p>foo &lt;!--&gt; foo --&gt;</p>\n<p>foo &lt;!-- foo---&gt;</p>\n"));
    CHECK(cmm::parce(std::string("foo <?php echo $a; ?>\n")) == std::string("<p>foo <?php echo $a; ?></p>\n"));
    CHECK(cmm::parce(std::string("foo <!ELEMENT br EMPTY>\n")) == std::string("<p>foo <!ELEMENT br EMPTY></p>\n"));
    CHECK(cmm::parce(std::string("foo <![CDATA[>&<]]>\n")) == std::string("<p>foo <![CDATA[>&<]]></p>\n"));
    CHECK(cmm::parce(std::string("foo <a href=\"&ouml;\">\n")) == std::string("<p>foo <a href=\"&ouml;\"></p>\n"));
    CHECK(cmm::parce(std::string("foo <a href=\"\\*\">\n")) == std::string("<p>foo <a href=\"\\*\"></p>\n"));
    CHECK(cmm::parce(std::string("<a href=\"\\\"\">\n")) == std::string("<p>&lt;a href=&quot;&quot;&quot;&gt;</p>\n"));
    CHECK(cmm::parce(std::string("foo  \nbaz\n")) == std::string("<p>foo<br />\nbaz</p>\n"));
    CHECK(cmm::parce(std::string("foo\\\nbaz\n")) == std::string("<p>foo<br />\nbaz</p>\n"));
    CHECK(cmm::parce(std::string("foo       \nbaz\n")) == std::string("<p>foo<br />\nbaz</p>\n"));
    CHECK(cmm::parce(std::string("foo  \n     bar\n")) == std::string("<p>foo<br />\nbar</p>\n"));
    CHECK(cmm::parce(std::string("foo\\\n     bar\n")) == std::string("<p>foo<br />\nbar</p>\n"));
    CHECK(cmm::parce(std::string("*foo  \nbar*\n")) == std::string("<p><em>foo<br />\nbar</em></p>\n"));
    CHECK(cmm::parce(std::string("*foo\\\nbar*\n")) == std::string("<p><em>foo<br />\nbar</em></p>\n"));
    CHECK(cmm::parce(std::string("`code \nspan`\n")) == std::string("<p><code>code  span</code></p>\n"));
    CHECK(cmm::parce(std::string("`code\\\nspan`\n")) == std::string("<p><code>code\\ span</code></p>\n"));
    CHECK(cmm::parce(std::string("<a href=\"foo  \nbar\">\n")) == std::string("<p><a href=\"foo  \nbar\"></p>\n"));
    CHECK(cmm::parce(std::string("<a href=\"foo\\\nbar\">\n")) == std::string("<p><a href=\"foo\\\nbar\"></p>\n"));
    CHECK(cmm::parce(std::string("foo\\\n")) == std::string("<p>foo\\</p>\n"));
    CHECK(cmm::parce(std::string("foo  \n")) == std::string("<p>foo</p>\n"));
    CHECK(cmm::parce(std::string("### foo\\\n")) == std::string("<h3>foo\\</h3>\n"));
    CHECK(cmm::parce(std::string("### foo  \n")) == std::string("<h3>foo</h3>\n"));
    CHECK(cmm::parce(std::string("foo\nbaz\n")) == std::string("<p>foo\nbaz</p>\n"));
    CHECK(cmm::parce(std::string("foo \n baz\n")) == std::string("<p>foo\nbaz</p>\n"));
    CHECK(cmm::parce(std::string("hello $.;'there\n")) == std::string("<p>hello $.;'there</p>\n"));
    CHECK(cmm::parce(std::string("Foo χρῆν\n")) == std::string("<p>Foo χρῆν</p>\n"));
    CHECK(cmm::parce(std::string("Multiple     spaces\n")) == std::string("<p>Multiple     spaces</p>\n"));
}
